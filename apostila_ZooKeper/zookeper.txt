O que é o Apache ZooKeeper?

O Apache ZooKeeper é um serviço centralizado para manter informações de configuração, fornecer sincronização distribuída e oferecer serviços de nomenclatura para sistemas distribuídos. Ele foi projetado para simplificar a complexidade do gerenciamento de um sistema distribuído, onde várias instâncias ou nós de servidores precisam se comunicar e coordenar entre si.


O que é um nó no contexto do ZooKeeper?

No contexto do ZooKeeper, um nó pode ter dois significados principais:

ZNode (nó de dados):

    É a estrutura de dados armazenada no ZooKeeper. O ZNode é similar a um nó em uma estrutura de árvore. Ele pode conter dados e pode ter filhos (nós subordinados), formando uma hierarquia.

    Os ZNodes podem ser:
        Persistentes: Mantêm-se até que sejam explicitamente excluídos.
        Efêmeros: Existem apenas enquanto o cliente que os criou está conectado ao ZooKeeper.

Servidor participante (nó de cluster):

    Em um cluster ZooKeeper, um nó refere-se a um servidor que participa do cluster. Cada servidor do cluster ZooKeeper é considerado um nó, e eles trabalham juntos para manter a consistência e tolerância a falhas.



O que é um cluster no contexto do ZooKeeper?

Um cluster no ZooKeeper é um conjunto de servidores que trabalham juntos para fornecer alta disponibilidade, consistência e resiliência. O cluster geralmente é composto por:

Nó líder (Leader):

Coordena as atualizações e distribui comandos para os outros servidores.
Nó seguidor (Follower):

Replica dados do líder e responde às solicitações de leitura dos clientes.



O problema da eleição de líder no ZooKeeper

A eleição de líder é um problema fundamental em sistemas distribuídos como o ZooKeeper. Ela ocorre porque é necessário identificar um único nó líder dentro de um cluster para coordenar determinadas operações. O líder é responsável por tomar decisões críticas, como distribuir tarefas ou replicar dados, enquanto os demais nós (seguidores) realizam operações sob sua coordenação.

Por que é necessário eleger um líder?
Consistência e coordenação:

Em sistemas distribuídos, múltiplos nós podem tentar realizar a mesma tarefa simultaneamente. Eleger um líder evita conflitos.
Centralização de decisões críticas:

O líder gerencia decisões importantes, como a atribuição de recursos ou sincronização entre nós.
Detecção de falhas:

Quando um líder falha, os nós restantes precisam detectar isso e eleger um novo líder para manter a operação do sistema.


Como o ZooKeeper resolve a eleição de líder?
O ZooKeeper utiliza um algoritmo de consenso baseado no Zab (ZooKeeper Atomic Broadcast), que é um protocolo de replicação e coordenação. O Zab garante:

Consistência linearizável: Todas as operações são ordenadas, e o estado do cluster é consistente.
Reeleição de líder após falhas: Quando o líder falha, os seguidores entram em consenso para eleger um novo líder.
Processo de eleição de líder no ZooKeeper:
Detecção de falha:

Se o líder atual falhar (o nó líder para de enviar batidas de coração ou desconecta), os seguidores percebem a falha.
Candidatos à liderança:

Cada nó do cluster verifica quem está disponível e começa a campanha para se tornar líder.
Cada nó tem um identificador único (geralmente baseado em seu ID ou timestamp), que será usado para decidir quem é o líder.
Votação:

Todos os nós participantes votam no candidato com o maior identificador (ou outro critério predefinido).
Durante o processo de votação, os nós continuam tentando se comunicar para garantir a maioria dos votos.
Eleição bem-sucedida:

Assim que um nó recebe a maioria dos votos (quórum), ele se torna o novo líder.
O líder notifica os seguidores sobre sua eleição e começa a coordenar as operações.
Atualização do estado:

O novo líder sincroniza seu estado com os seguidores para garantir que o cluster esteja consistente.




O que é um ZNode no ZooKeeper?
Um ZNode é a unidade fundamental de armazenamento de dados no Apache ZooKeeper. Ele funciona como um nó em uma estrutura de árvore hierárquica. A hierarquia de ZNodes no ZooKeeper é semelhante à de um sistema de arquivos, com cada ZNode podendo conter dados (limitados a 1 MB) e ter nós filhos.

Tipos de ZNodes:
Persistentes:

Permanecem no ZooKeeper até que sejam explicitamente excluídos.
Exemplo: Configurações de sistemas que devem ser mantidas independentemente de desconexões.
Efêmeros:

São criados por um cliente e desaparecem automaticamente quando o cliente desconecta ou falha.
Muito úteis para a eleição de líder e detecção de falhas.
Sequenciais:

Quando um ZNode é criado com o atributo sequencial, o ZooKeeper adiciona um número incremental único ao nome do ZNode.
Usado para garantir ordem ou rastrear a criação de nós.
Como um ZNode ajuda na eleição de líder?
O ZooKeeper utiliza ZNodes efêmeros e sequenciais para resolver de forma eficiente o problema da eleição de líder. O processo típico funciona assim:

1. Criação de ZNodes efêmeros e sequenciais
Cada servidor ou processo participante na eleição cria um ZNode efêmero e sequencial em um diretório específico do ZooKeeper.
Exemplo: /election/nó-00000001, /election/nó-00000002, etc.
Como os ZNodes são sequenciais, cada nó terá um identificador único e ordenado.
2. Determinação do líder
O nó que cria o ZNode com o menor número sequencial é automaticamente considerado o líder.
Exemplo: Se os ZNodes criados forem:
bash
Copiar código
/election/nó-00000001
/election/nó-00000002
/election/nó-00000003
O nó que criou /election/nó-00000001 será o líder.
3. Monitoramento dos ZNodes
Cada nó monitora o próximo ZNode mais baixo na sequência.
Exemplo: O nó que criou /election/nó-00000003 monitorará /election/nó-00000002, enquanto o nó de /election/nó-00000002 monitorará /election/nó-00000001.
Se o ZNode do líder (menor número) for removido, o próximo nó na ordem sequencial será promovido a líder.
4. Detecção de falhas
Como os ZNodes do tipo efêmero desaparecem automaticamente se o nó criador falhar ou desconectar, a falha do líder é detectada rapidamente.
Quando isso acontece:
O próximo ZNode na sequência (com o menor número restante) assume automaticamente a liderança.
O processo de monitoramento garante que a transição seja feita sem conflitos.
Vantagens de usar ZNodes na eleição de líder:
Simplicidade e automação:
A ordem sequencial dos ZNodes simplifica a eleição de líder.
Detecção automática de falhas:
Como ZNodes efêmeros desaparecem automaticamente, o ZooKeeper detecta falhas de forma natural.
Alta disponibilidade:
O processo de eleição é rápido, garantindo que um novo líder seja escolhido sem interrupções prolongadas.
Evita condições de corrida:
O uso de ZNodes sequenciais garante que não haja dois líderes ao mesmo tempo.
Escalabilidade:
Pode ser usado eficientemente em clusters grandes, com nós monitorando apenas seu antecessor na sequência.
Exemplo prático de eleição de líder usando ZNodes:
Quatro servidores participam do cluster e criam ZNodes sequenciais:

bash
Copiar código
/election/nó-00000001
/election/nó-00000002
/election/nó-00000003
/election/nó-00000004
O servidor que criou /election/nó-00000001 é o líder.

Ele executa tarefas de liderança, como distribuir carga ou coordenar tarefas.
Se o servidor líder falha:

O ZNode /election/nó-00000001 desaparece.
O próximo servidor na sequência (com /election/nó-00000002) é promovido a líder.
O processo se repete sempre que o líder falha.




Comandos do ZooKeeper e suas funções
./zkServer.sh start

O que faz?
Inicia o servidor ZooKeeper no ambiente local.
Quando usar?
Para colocar o servidor ZooKeeper em execução.
./zkServer.sh status

O que faz?
Verifica o status do servidor ZooKeeper.
Saída esperada:
Exibe informações sobre se o ZooKeeper está rodando, se é um líder ou seguidor, e outros detalhes de funcionamento.
/zkCli.sh (Unix-like)

O que faz?
Inicia o cliente interativo do ZooKeeper no terminal, permitindo que você envie comandos para interagir com o servidor.
help

O que faz?
Lista todos os comandos disponíveis no cliente ZooKeeper e suas descrições.
ls /

O que faz?
Lista os nós (ZNodes) diretamente sob o ZNode raiz (/) do ZooKeeper.
Saída esperada:
Uma lista dos ZNodes presentes na raiz, como /zookeeper.
Criação de ZNodes
create /eleicao

O que faz?
Cria um novo ZNode chamado /eleicao.
Por padrão:
Este ZNode é persistente, ou seja, ele permanecerá no ZooKeeper até ser explicitamente excluído.
create /eleicao/cand1

O que faz?
Cria um novo ZNode chamado cand1 como um filho de /eleicao.
create /eleicao/cand2

O que faz?
Cria um novo ZNode chamado cand2 como um filho de /eleicao.
Listagem de ZNodes
ls /eleicao

O que faz?
Lista todos os ZNodes filhos diretamente sob o ZNode /eleicao.
Saída esperada:
Exibe [cand1, cand2], assumindo que esses ZNodes foram criados anteriormente.
ls / -R

O que faz?
Lista todos os ZNodes no cluster, começando pela raiz (/) de forma recursiva.
Saída esperada:
Mostra a hierarquia completa de ZNodes no servidor.
Criação com dados associados
create /eleicao/cand3 “Posso ser líder, se necessário”
O que faz?
Cria um ZNode chamado cand3 sob /eleicao com o dado associado "Posso ser líder, se necessário".
Por padrão:
ZNodes podem armazenar até 1 MB de dados.
Visualização e modificação de dados
get /eleicao/cand3

O que faz?
Recupera os dados armazenados no ZNode /eleicao/cand3.
Saída esperada:
Exibe: "Posso ser líder, se necessário".
set /eleicao/cand2 “Topo ser líder”

O que faz?
Modifica os dados armazenados no ZNode /eleicao/cand2 para "Topo ser líder".
get /eleicao/cand2

O que faz?
Recupera os dados armazenados no ZNode /eleicao/cand2.
Saída esperada:
Exibe: "Topo ser líder".
Obtenção de metadados
get -s /eleicao

O que faz?
Recupera os dados armazenados no ZNode /eleicao junto com seus metadados, como:
Número de filhos.
Versão do ZNode.
Estatísticas de criação/modificação.
Saída esperada:
Exibe informações como:
yaml
Copiar código
cZxid: 0x100000002
mZxid: 0x100000002
pZxid: 0x100000003
ctime: Fri Nov 17 16:00:00 UTC 2023
mtime: Fri Nov 17 16:00:00 UTC 2023
dataLength: 0
numChildren: 3
get -s /eleicao/cand2

O que faz?
Recupera os dados armazenados no ZNode /eleicao/cand2 junto com seus metadados.
Exclusão de ZNodes
delete /eleicao/cand3

O que faz?
Exclui o ZNode /eleicao/cand3.
Nota: Não é possível excluir um ZNode que tenha filhos.
delete /eleicao

O que faz?
Tenta excluir o ZNode /eleicao.
Nota: Isso falhará se /eleicao ainda contiver filhos (como cand1 ou cand2).
deleteall /eleicao

O que faz?
Exclui o ZNode /eleicao e todos os seus filhos de forma recursiva.
Uso comum: Para limpar hierarquias inteiras de ZNodes rapidamente.
Resumo
Os comandos acima permitem:

Gerenciar servidores ZooKeeper.
Interagir com ZNodes para criar, listar, modificar e excluir dados.
Resolver problemas comuns de coordenação, como armazenar informações de líderes e gerenciar hierarquias de dados.





Esse código em Java demonstra a interação com o Apache ZooKeeper para criar uma estrutura básica de conexão e monitoramento de eventos no sistema distribuído. Aqui está uma explicação detalhada do que o código faz e o papel do ZooKeeper:

1. O que é o ZooKeeper?
O Apache ZooKeeper é um serviço centralizado para gerenciar a configuração, sincronização e nomes em sistemas distribuídos. Ele é usado para coordenação em ambientes distribuídos e oferece primitivas como:

Election (Eleição): Garantir que apenas um nó seja o líder.
Locks (Travas): Garantir que recursos sejam acessados por apenas um nó por vez.
Synchronization (Sincronização): Manter dados consistentes entre nós.
No contexto do código, o ZooKeeper é utilizado para gerenciar a conectividade e pode ser parte de uma implementação de eleição de líder em sistemas distribuídos.

2. Análise do Código
Atributos da Classe
HOST e PORTA: Indicam o endereço do servidor ZooKeeper. O código está configurado para rodar no localhost (máquina local), porta 2181 (porta padrão do ZooKeeper).
TIMEOUT: Especifica o tempo de espera (em milissegundos) para estabelecer a conexão.
zooKeeper: Um objeto que representa a conexão com o serviço ZooKeeper.
Métodos
conectar:

Conecta ao servidor ZooKeeper usando o endereço configurado (localhost:2181).
Configura um Watcher, que é um listener de eventos para o cliente ZooKeeper.
O Watcher está configurado para monitorar dois estados principais:
SyncConnected: O cliente foi conectado com sucesso ao servidor ZooKeeper. Um log é exibido no console.
Disconnected: A conexão com o servidor foi perdida. Neste caso, o código sincroniza no objeto zooKeeper e emite uma notificação para as threads que estão aguardando.
Essa estrutura permite que o cliente ZooKeeper lide com a (re)conexão automaticamente.
executar:

Coloca a thread principal em espera (utilizando wait() em um bloco sincronizado com zooKeeper).
Essa espera é liberada quando o estado de conexão muda para "Disconnected" e um notify() é chamado no objeto zooKeeper.
fechar:

Fecha a conexão com o ZooKeeper para liberar recursos.
main:

Chama os métodos principais em sequência:
Conecta ao servidor ZooKeeper.
Aguarda a execução do processo.
Fecha a conexão ao final.
3. O que esse código faz?
Este código estabelece uma conexão básica com o ZooKeeper, que poderia ser utilizada como parte de uma aplicação distribuída. Ele:

Conecta ao ZooKeeper e mantém a conexão ativa.
Monitora eventos de conexão e desconexão usando Watcher.
Aguarda eventos ou mudanças no estado de conexão.
Fecha a conexão de forma adequada ao final.
4. O papel do ZooKeeper no código
No exemplo, o ZooKeeper funciona como um sistema de coordenação e monitoramento. Especificamente:

Coordenação de Conexão: Garante que o cliente seja notificado quando a conexão for estabelecida ou perdida.
Sincronização: O código utiliza mecanismos básicos de sincronização (como wait e notify) associados ao ZooKeeper para esperar por eventos.
Embora o código se chame EleicaoDeLider, ele ainda não implementa a lógica de eleição. Isso seria feito em passos adicionais, como:

Criar um nó "efêmero" no ZooKeeper.
Determinar o líder com base na ordem de criação dos nós (por exemplo, o nó com o menor ID é o líder).
Monitorar mudanças no líder (quando um nó cai, o próximo nó na lista se torna o líder).
5. Exemplo de Aplicação no Mundo Real
Um caso comum para usar esse tipo de estrutura seria em um sistema distribuído onde vários servidores/nós precisam:

Escolher um líder responsável por coordenar tarefas.
Detectar a falha de líderes e eleger um novo líder rapidamente.
Sincronizar estado entre servidores/nós.
O código é um ponto de partida para implementar tais sistemas usando o ZooKeeper.




A principal thread do programa está sendo utilizada para monitorar eventos de conexão com o ZooKeeper. Isso é realizado com a chamada de:

java
Copiar código
synchronized (zooKeeper) {
    zooKeeper.wait();
}
O que isso significa na prática?
A thread principal do programa (a que executa o main) entra em um estado de espera indefinido até que seja notificada.
O objeto zooKeeper é usado como um monitor (ou "lock") para controlar o acesso sincronizado.
A espera é interrompida apenas quando o método notify() é chamado no mesmo objeto (nesse caso, no zooKeeper), o que ocorre quando um evento de desconexão é detectado:
java
Copiar código
else if (evento.getState() == Watcher.Event.KeeperState.Disconnected) {
    synchronized (zooKeeper) {
        System.out.printf("Desconectou!\n");
        zooKeeper.notify(); // Libera a thread que estava em espera
    }
}
Por que fazer isso?
Sincronização com eventos do ZooKeeper: A thread principal só "sai" do estado de espera quando ocorre um evento de desconexão no ZooKeeper, o que permite que o programa reaja ou finalize adequadamente.
Evitar um loop ativo: A abordagem de wait() evita que o programa consuma CPU inutilmente enquanto aguarda por mudanças no estado de conexão.
Qual a relação com a thread principal do programa?
A thread principal está basicamente:

Conectando-se ao ZooKeeper.
Entrando em um estado de "monitoramento passivo" (com wait()), aguardando eventos críticos, como desconexões.
Liberando-se do estado de espera apenas quando há uma notificação (notify()), permitindo que siga para o encerramento (fechar).
Isso significa que o programa está configurado para não executar mais nada enquanto não ocorrer uma mudança importante no estado da conexão com o ZooKeeper.






Neste projeto, há duas categorias principais de threads em funcionamento: threads de eventos e threads de Input/Output (I/O). Vamos analisá-las no contexto deste código.

1. Threads de Evento
As threads de evento estão associadas ao ZooKeeper Watcher, que monitora eventos e dispara ações quando algo acontece (como conexão, desconexão, ou mudanças de estado).

Onde estão as threads de evento?
A thread de evento é controlada pela API do ZooKeeper, que gerencia o callback do Watcher configurado no construtor do objeto ZooKeeper. Este trecho é a base para capturar os eventos:

java
Copiar código
zooKeeper = new ZooKeeper(
    String.format("%s:%s", HOST, PORTA), TIMEOUT,
    (evento) -> {
        if (evento.getType() == None) {
            if (evento.getState() == Watcher.Event.KeeperState.SyncConnected) {
                System.out.println("Conectou!\n");
                System.out.printf("Estamos na thread: %s\n", Thread.currentThread().getName());
            } else if (evento.getState() == Watcher.Event.KeeperState.Disconnected) {
                synchronized (zooKeeper) {
                    System.out.printf("Desconectou!\n");
                    System.out.printf("Estamos na thread: %s\n", Thread.currentThread().getName());
                    zooKeeper.notify();
                }
            }
        }
    }
);
Como funciona?

O ZooKeeper executa eventos assíncronos em uma thread gerenciada internamente por ele, distinta da thread principal.
O callback lambda configurado no construtor é chamado sempre que um evento relevante acontece (conexão, desconexão, etc.).
O método:
java
Copiar código
System.out.printf("Estamos na thread: %s\n", Thread.currentThread().getName());
revela que o código de eventos (Watcher) é executado em uma thread de evento interna do ZooKeeper, diferente da thread principal.
2. Threads de Input/Output (I/O)
Threads de I/O são utilizadas implicitamente pelo ZooKeeper para gerenciar a comunicação de rede entre o cliente e o servidor ZooKeeper. Essas threads não aparecem explicitamente no código, mas fazem parte da infraestrutura de conexão assíncrona do ZooKeeper.

Onde estão as threads de I/O?
Quando o cliente ZooKeeper é inicializado:
java
Copiar código
zooKeeper = new ZooKeeper(String.format("%s:%s", HOST, PORTA), TIMEOUT, ...);
o ZooKeeper cria internamente threads separadas para:
Estabelecer e manter a conexão com o servidor ZooKeeper.
Enviar e receber dados de rede (I/O) entre o cliente e o servidor.
Essas threads são utilizadas para:

Comunicação TCP com o servidor ZooKeeper.
Gerenciamento de respostas de operações assíncronas (como monitoramento de nós ou eleição de líder, se implementado posteriormente).
Embora o código não interaja diretamente com essas threads, elas são criadas e gerenciadas automaticamente pelo ZooKeeper.

Resumo: Onde estão as threads de evento e I/O?
Threads de Evento:

Ativadas pelo Watcher configurado no ZooKeeper.
Gerenciam mudanças no estado de conexão, como SyncConnected ou Disconnected.
Executam o código do callback em uma thread separada gerenciada pelo ZooKeeper.
Threads de I/O:

Implícitas no ZooKeeper, responsáveis por:
Comunicação de rede (TCP) entre o cliente e o servidor ZooKeeper.
Envio e recebimento de dados.
São threads internas da implementação do ZooKeeper e não aparecem explicitamente no código.
Interação entre Threads
A thread principal entra em espera (zooKeeper.wait()), aguardando notificações das threads de evento.
As threads de evento notificam a thread principal via zooKeeper.notify() quando ocorre um evento de desconexão.
As threads de I/O asseguram que a comunicação com o servidor ZooKeeper permaneça funcional.


As adições no código expandem a funcionalidade para implementar a eleição de líder em um sistema distribuído usando ZooKeeper. Vamos analisar cada método novo e o que ele faz.

Novos Componentes
1. Constante NAMESPACE_ELEICAO
java
Copiar código
private static final String NAMESPACE_ELEICAO = "/eleicao";
Define o namespace (ou nó pai) no ZooKeeper onde serão criados os nós temporários para representar os candidatos à liderança.
Isso organiza os candidatos em um local específico no sistema ZooKeeper.
2. Variável nomeDoZNodeDesseProcesso
java
Copiar código
private String nomeDoZNodeDesseProcesso;
Armazena o identificador do nó (znode) que representa o processo atual no sistema de eleição.
Este identificador será usado para verificar se o processo atual é o líder.
Novos Métodos
1. Método realizarCandidatura
java
Copiar código
public void realizarCandidatura () throws InterruptedException, KeeperException {
    String prefixo = String.format("%s/cand_", NAMESPACE_ELEICAO);
    String pathInteiro = zooKeeper.create(prefixo, new byte[]{}, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);
    System.out.println(pathInteiro);
    this.nomeDoZNodeDesseProcesso = pathInteiro.replace(String.format("%s/", NAMESPACE_ELEICAO), "");
}
O que ele faz?

Define o prefixo: Cria um prefixo para os nós candidatos, como /eleicao/cand_.
Cria um znode efêmero e sequencial:
Usa CreateMode.EPHEMERAL_SEQUENTIAL para criar um nó que:
É efêmero: Será automaticamente removido quando o processo que o criou encerrar.
É sequencial: O ZooKeeper adiciona um sufixo numérico ao nome do nó, garantindo que os nós sejam criados em ordem cronológica.
Por exemplo: "/eleicao/cand_00000001".
Armazena o nome do znode do processo: Remove o caminho base (/eleicao/) para extrair apenas o nome único, como cand_00000001.
Por que é necessário?

O znode efêmero e sequencial é essencial para o sistema de eleição, pois o menor znode na sequência será eleito líder.
O znode efêmero também garante que, se o processo falhar, o nó seja automaticamente removido, desencadeando uma nova eleição.
2. Método elegerOLider
java
Copiar código
public void elegerOLider () throws InterruptedException, KeeperException {
    List <String> candidatos = zooKeeper.getChildren(NAMESPACE_ELEICAO, false);
    Collections.sort(candidatos);
    String oMenor = candidatos.get(0);

    if (oMenor.equals(nomeDoZNodeDesseProcesso)){
        System.out.printf("Me chamo %s e sou o líder", nomeDoZNodeDesseProcesso);
    } else {
        System.out.printf("Me chamo %s e não sou o líder. O líder é o %s.", nomeDoZNodeDesseProcesso, oMenor);
    }
}
O que ele faz?

Recupera todos os candidatos:
Usa zooKeeper.getChildren para obter a lista de todos os nós filhos criados no namespace /eleicao.
Cada nó filho representa um processo candidato à liderança.
Ordena os candidatos:
Os nós são ordenados em ordem crescente (alfabética). Como os nomes são sequenciais (cand_00000001, cand_00000002), o menor será o primeiro na lista.
Verifica o líder:
O menor nó na lista (oMenor) é o líder.
Se o nó atual (nomeDoZNodeDesseProcesso) é o menor, o processo atual é o líder.
Caso contrário, o processo atual não é o líder e exibe o identificador do líder.
Por que é necessário?

Determina quem é o líder de forma eficiente usando a ordenação dos nós sequenciais.
Permite que qualquer processo saiba quem é o líder, seja ele mesmo ou outro.
Fluxo do Programa com as Novas Funções
Conectar ao ZooKeeper:

O processo se conecta ao servidor ZooKeeper.
Realizar candidatura:

O processo cria um nó efêmero e sequencial para participar da eleição.
Eleger o líder:

O processo verifica todos os candidatos e determina quem é o líder.
Se o processo atual criou o menor znode, ele se declara líder.
Caso contrário, ele reconhece o líder e exibe seu identificador.
Executar:

O processo entra em espera (zooKeeper.wait()) para eventos futuros.
Fechar:

O processo encerra sua conexão com o ZooKeeper.
O que essas mudanças implementam?
Eleição de líder: Um processo que utiliza os nós efêmeros e sequenciais do ZooKeeper para determinar o líder de forma distribuída.
Automação e resiliência: Se o líder falhar (processo ou nó efêmero desaparecer), a eleição pode ser reiniciada automaticamente pelos outros processos.
Simplicidade: O uso de ordenação na lista de filhos (getChildren) simplifica a lógica de determinar o líder.
Essas adições tornam o código um sistema distribuído básico, onde os processos participam de uma eleição de líder coordenada pelo ZooKeeper.